stages:
- stage: BuildPackSource
  jobs:
  - job: BuildReloadify
    displayName: Build Reloadify3000
    pool:
      vmImage: 'windows-latest'
      demands:
      - MSBuild

    steps:
    - task: Bash@3
      displayName: 'Version Script'
      inputs:
        targetType: 'inline'
        script: |
          echo '$(Build_BuildID)' $BUILD_BUILDID
                  BUILDNUMBER=$BUILD_BUILDID
                  VERSION=0.1.$BUILDNUMBER-beta
                  echo 'VERSION ' $VERSION
                  
                  #if ! [ $BRANCH = master ]; then
                  #   VERSION=1.0.$BUILDNUMBER
                  #    echo "##vso[build.updatebuildnumber]$VERSION"
                  #fi;
                  
                  echo "##vso[task.setvariable variable=Version]$VERSION"

    - task: NuGetToolInstaller@1
      displayName: Use Nuget 5.0.2
      inputs:
        versionSpec: '5.0.2'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: Reloadify.sln

    - task: MSBuild@1
      displayName: 'Build Reloadify'
      inputs:
        solution: 'Reloadify3000/Reloadify3000.csproj'
        configuration: '$(BuildConfiguration)'

    - task: MSBuild@1
      displayName: 'Build Reloadify3000.Build'
      inputs:
        solution: 'Reloadify3000.Build/Reloadify3000.Build.Tasks.csproj'
        configuration: '$(BuildConfiguration)'

    - task: MSBuild@1
      displayName: 'Build Comet.Reload'
      inputs:
        solution: 'Comet.Reload/Comet.Reload.csproj'
        configuration: '$(BuildConfiguration)'

    - task: NuGetCommand@2
      displayName: 'dotnet pack Reloadify3000.nuspec'
      inputs:
        command: pack
        packagesToPack: 'Reloadify3000.nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: NuGetCommand@2
      displayName: 'dotnet pack Comet.Reload.nuspec'
      inputs:
        command: pack
        packagesToPack: 'Clancey.Comet.Reload.nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION        

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**\*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_nuget_beta'
        publishLocation: 'Container'
   
    - script: echo Publish Nuget Github the code!

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'ClanceyNugetFeed'